{"version":3,"sources":["Components/Header/Header.js","Lib/chars.js","Components/Button/Button.js","Components/Main/Main.js","Lib/numbers.js","Components/SideBar/SideBar.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","CHARS","id","value","active","Button","state","isClicked","valueChar","handleClick","props","handleOnClick","setState","this","char","onClick","type","React","Component","Main","buttons","isActive","forEach","obj","index","map","el","NUMBERS","SideBar","password","generatePass","SELECTED_CHARS","push","CHAR","NUM_CHARS","RANDOMISE","i","random","Math","floor","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ccdb4a80.chunk.js","sourcesContent":["import React from \"react\"; \nimport './Header.css';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nconst Header = () => {\n    return (\n        <header className=\"container-fluid mx-auto text-center headerWrapper\">\n            <div className=\"row\">\n                <div className=\"col-12 my-3\">\n                    <h1>RANDOM PASSWORD GENERATOR</h1>\n                </div>\n            </div>\n        </header>\n    )\n}\n\n\nexport default Header;","export const CHARS = [\n  {id: 0, value: \" \", active: false},\n  {id: 1, value:\"!\", active: false},\n  {id: 2, value:'\"', active: false},\n  {id: 3, value:\"#\", active: false},\n  {id: 4, value:\"$\", active: false},\n  {id: 5, value:\"%\", active: false},\n  {id: 6, value:\"&\", active: false},\n  {id: 7, value:\"'\", active: false},\n  {id: 8, value:\"(\", active: false},\n  {id: 9, value:\")\", active: false},\n  {id: 10, value:\"*\", active: false},\n  {id: 11, value:\"+\", active: false},\n  {id: 12, value:\",\", active: false},\n  {id: 13, value:\"-\", active: false},\n  {id: 14, value:\".\", active: false},\n  {id: 15, value:\"/\", active: false},\n  {id: 16, value:\":\", active: false},\n  {id: 17, value:\";\", active: false},\n  {id: 18, value:\"<\", active: false},\n  {id: 19, value:\"=\", active: false},\n  {id: 20, value:\">\", active: false},\n  {id: 21, value:\"?\", active: false},\n  {id: 22, value:\"@\", active: false},\n  {id: 23, value:\"[\", active: false},\n  {id: 24, value:\"]\", active: false},\n  {id: 25, value:\"^\", active: false},\n  {id: 26, value:\"_\", active: false},\n  {id: 27, value:\"`\", active: false},\n  {id: 28, value:\"{\", active: false},\n  {id: 29, value:\"|\", active: false},\n  {id: 30, value:\"}\", active: false},\n  {id: 31, value:\"~\", active: false}\n];\n","import React from \"react\";\nimport \"./Button.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n// const newValueChar = [];\n\nclass Button extends React.Component {\n  state = {\n    isClicked: false,\n    valueChar: \"\"\n  };\n\n  handleClick = (id) => {\n\n    this.props.handleOnClick(id);\n\n    this.setState({\n      isClicked: !this.state.isClicked\n    });\n  };\n\n  render() {\n    let { value, char, id } = this.props;\n\n    const isClicked = this.state.isClicked ? \"btn btn2\" : \"btn btn1\";\n\n    return (\n      <>\n        <button\n          id={id}\n          onClick={() => this.handleClick(id)}\n          value={value}\n          type=\"button\"\n          className={isClicked}\n        >\n          {char}\n        </button>\n      </>\n    );\n  }\n}\n\nexport default Button;\n","import React from \"react\";\nimport \"./Main.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport { CHARS } from \"../../Lib/chars\";\nimport Button from \"../Button/Button\";\n\nlet newCharsArr = [];\n\nclass Main extends React.Component {\n  state = {\n    buttons: \"\",\n    isActive: true\n  };\n\n  componentDidMount() {\n    let buttons = CHARS.map((el, index) => {\n      //console.log(index);\n      return (\n        <div className=\"col-3 my-1 mx-4\">\n          <Button\n            handleOnClick={this.handleClick}\n            id={el.id}\n            value={el.value}\n            char={el.value}\n          />\n        </div>\n      );\n    });\n\n    this.setState({\n      buttons: buttons\n    });\n  }\n\n  handleClick = id => {\n    this.setState({\n      isActive: !this.state.isActive\n    });\n\n    CHARS.forEach((obj, index) => {\n      if (obj.id === id) obj.active = !obj.active;\n    });\n  };\n\n  render() {\n    // console.log(newCharsArr);\n    return (\n      <main className=\"container-fluid mx-auto text-center mainWrapper float-left\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <h2 className=\"my-3\">CHOOSE SOME CHARACTERS</h2>\n          </div>\n        </div>\n        <div className=\"row\">{this.state.buttons}</div>\n      </main>\n    );\n  }\n}\n\nexport default Main;\n","export const NUMBERS = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\n","import React from \"react\";\nimport \"./SideBar.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport { CHARS } from \"../../Lib/chars\";\nimport { NUMBERS } from \"../../Lib/numbers\";\n\n//console.log(RANDOMISE)\n\nclass SideBar extends React.Component {\n  state = {\n    password: \"\"\n  };\n\n  generatePass = () => {\n    const SELECTED_CHARS = [];\n\n    CHARS.forEach(el => {\n      if (el.active) SELECTED_CHARS.push(el);\n    });\n\n    const CHAR = SELECTED_CHARS.map(el => {\n      return el.value;\n    });\n\n    const NUM_CHARS = [...NUMBERS, ...CHAR];\n\n    const RANDOMISE = [];\n    for (let i = 0; i < 4; i++) {\n      let random = Math.floor(Math.random() * NUM_CHARS.length);\n      RANDOMISE.push(NUM_CHARS[random]);\n    }\n\n    this.setState({\n      password: RANDOMISE\n    });\n  };\n\n  render() {\n    return (\n      <main className=\"container-fluid mx-auto text-center sideBarWrapper float-right\">\n        <div className=\"row\">\n          <div className=\"col-12 my-3\">\n            <h2>CHECK YOUR PASSWORD !</h2>\n            <h2 className=\"wrapperPassword p-3\">{this.state.password}</h2>\n            <button\n              onClick={this.generatePass}\n              type=\"button\"\n              className=\"btn btn2 my-3\"\n            >\n              Generate !\n            </button>\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default SideBar;\n","import React from \"react\";\n//import \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport Header from './Components/Header/Header';\nimport Main from './Components/Main/Main';\nimport SideBar from './Components/SideBar/SideBar';\n\nfunction App() {\n\n  return (\n    <div>\n      <Header />\n      <Main />\n      <SideBar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}